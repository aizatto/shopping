{"version":3,"sources":["Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","useState","collapsed","setCollapsed","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","markets","store","urlObject","urlLib","search","undefined","query","newUrlString","App","queriesLocalStorage","window","localStorage","getItem","JSON","parse","queries","setQueries","setQuery","queryElements","map","queryDS","marketElements","market","Card","key","CardTitle","Container","onSubmit","e","preventDefault","newQuery","trim","length","newQueries","Array","from","unshift","setItem","stringify","setQueriesInLocalStorage","Input","defaultValue","onChange","target","value","Button","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.caedba12.chunk.js","sourcesContent":["/**\n * https://reactstrap.github.io/components/navbar/\n */\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://build.my/\">build.my</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.deepthoughtapp.com/\">Deep Thought</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/shopping\">Shopping</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","import React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport { Container, Input, CardTitle, Card, Button } from 'reactstrap';\nimport * as urlLib from 'url';\n\ninterface QueryDataStore {\n  query: string,\n}\n\nconst markets = [\n  (store: QueryDataStore): React.ReactNode => {\n    const urlString = \"https://www.lazada.com.my/catalog/\";\n    const urlObject = urlLib.parse(urlString, true);\n    urlObject.search = undefined;\n    urlObject.query['q'] = store.query;\n\n    const newUrlString = urlLib.format(urlObject);\n\n    return (\n      <a href={newUrlString}>Lazada</a>\n    )\n  },\n  (store: QueryDataStore): React.ReactNode => {\n    const urlString = \"https://shopee.com.my/search\";\n    const urlObject = urlLib.parse(urlString, true);\n    urlObject.search = undefined;\n    urlObject.query['keyword'] = store.query;\n\n    const newUrlString = urlLib.format(urlObject);\n\n    return (\n      <a href={newUrlString}>Shopee</a>\n    )\n  },\n  (store: QueryDataStore): React.ReactNode => {\n    const urlString = \"https://www.facebook.com/marketplace/kualalumpur/search/?vertical=C2C&sort=BEST_MATCH\";\n    const urlObject = urlLib.parse(urlString, true);\n    urlObject.search = undefined;\n    urlObject.query['query'] = store.query;\n\n    const newUrlString = urlLib.format(urlObject);\n\n    return (\n      <a href={newUrlString}>Facebook Marketplace</a>\n    )\n  },\n  (store: QueryDataStore): React.ReactNode => {\n    const urlString = \"https://my.carousell.com/search/products/\";\n    const urlObject = urlLib.parse(urlString, true);\n    urlObject.search = undefined;\n    urlObject.query['query'] = store.query;\n\n    const newUrlString = urlLib.format(urlObject);\n\n    return (\n      <a href={newUrlString}>Carousell</a>\n    )\n  },\n  (store: QueryDataStore): React.ReactNode => {\n    const urlString = \"https://www.amazon.com/s?\";\n    const urlObject = urlLib.parse(urlString, true);\n    urlObject.search = undefined;\n    urlObject.query['k'] = store.query;\n\n    const newUrlString = urlLib.format(urlObject);\n\n    return (\n      <a href={newUrlString}>Amazon</a>\n    )\n  },\n];\n\nfunction setQueriesInLocalStorage(queries: QueryDataStore[]) {\n  window.localStorage.setItem('queries', JSON.stringify(queries));\n}\n\nconst App: React.FC = () => {\n  const [queries, setQueries] = useState<QueryDataStore[]>(() =>{\n    const queriesLocalStorage = window.localStorage.getItem('queries');\n    if (!queriesLocalStorage) {\n      return [];\n    }\n\n    return JSON.parse(queriesLocalStorage);\n  });\n\n  const [query, setQuery] = useState('');\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n\n    const newQuery = query.trim();\n    if (newQuery.length === 0) {\n      return;\n    }\n\n    const newQueries = Array.from(queries);\n    newQueries.unshift({\n      query: newQuery,\n    });\n\n    setQueries(newQueries);\n    setQueriesInLocalStorage(newQueries);\n  }\n\n  const queryElements = queries.map(queryDS => {\n    const marketElements = markets.map(market => {\n      return <li>{market(queryDS)}</li>;\n    });\n    return (\n      <Card key={queryDS.query}>\n        <CardTitle>\n          {queryDS.query}\n        </CardTitle>\n        <ul>\n          {marketElements}\n        </ul>\n      </Card>\n    )\n  })\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Container>\n        <form onSubmit={onSubmit}>\n          <Input\n            defaultValue={query}\n            onChange={e => setQuery(e.target.value)}\n          />\n          <Button>\n            Insert Query\n          </Button>\n        </form>\n        {queryElements}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}